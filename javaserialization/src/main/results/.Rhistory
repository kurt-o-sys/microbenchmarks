for (fork in 1:length(item$primaryMetric$rawData)) {
for(it in 1:length(item$primaryMetric$rawData[[fork]])) {
row<-data.frame(
benchmark=benchmark,
mode=mode,
entity=entity,
threads=threads,
fork=fork,
smile=smile,
array=array,
json=json,
ext=ext,
fast=fast,
compress=compress,
iteration=it,
metric=item$primaryMetric$rawData[[fork]][it],
size=size
)
results <- rbind(results, row)
}
}
}
rm(sizes,array,row,benchmark,mode,compress,entity,ext,fast,fork,i,it,item,json,size,smile,threads)
}
names(results)
lm(metric~fork,smile,array,json,ext,fast,compress,iteration, data=results[results$mode=="avgt" & results$threads==1,])
lm(metric~fork+smile+array+json+ext+fast+compress+iteration, data=results[results$mode=="avgt" & results$threads==1,])
lm.ridge(metric~fork+smile+array+json+ext+fast+compress+iteration, data=results[results$mode=="avgt" & results$threads==1,])
library(MASS)
lm.ridge(metric~fork+smile+array+json+ext+fast+compress+iteration, data=results[results$mode=="avgt" & results$threads==1,])
install.packages("lars)")
install.packages("lars")
library(lars)
lars(c(fork,smile,array,json,ext,fast,compress,iteration),metric, type=c("lars"))
help(lars)
lars(c(fork,smile,array,json,ext,fast,compress,iteration),metric, type=c("lar"))
lars(c(results$fork,results$smile,results$array,results$json,results$ext,results$fast,results$compress,results$iteration),results$metric, type=c("lar"))
lars(cbind(results$fork,results$smile,results$array,results$json,results$ext,results$fast,results$compress,results$iteration),results$metric, type=c("lar"))
lars<-lars(cbind(results$fork,results$smile,results$array,results$json,results$ext,results$fast,results$compress,results$iteration),results$metric, type=c("lar"))
names(lars)
lars$type
lars$R2
lars$normx
lars$Cp
lars$df
lars$actions
lars
summary(lars)
names(lars)
lars$entry
lars$beta
lars(normx)
lars$norms
lars$normx
lars$meanx
names (lars)
avgt=results[results$mode=="avgt" & results$threads==1,]
lm(metric~fork+smile+array+json+ext+fast+compress+iteration, data=avgt)
library(MASS)
lm.ridge(metric~fork+smile+array+json+ext+fast+compress+iteration, data=avgt)
library(lars)
lars<-lars(cbind(avgt$fork,avgt$smile,avgt$array,avgt$json,avgt$ext,avgt$fast,avgt$compress,avgt$iteration),avgt$metric, type=c("lar"))
lars
avgt=results[results$mode=="avgt" & results$threads==1,]
lm<-lm(metric~fork+smile+array+json+ext+fast+compress+iteration, data=avgt)
library(MASS)
lmridge<-lm.ridge(metric~fork+smile+array+json+ext+fast+compress+iteration, data=avgt)
library(lars)
lars<-lars(cbind(avgt$fork,avgt$smile,avgt$array,avgt$json,avgt$ext,avgt$fast,avgt$compress,avgt$iteration),avgt$metric, type=c("lar"))
summary(lm)
summary(lmridge)
lmridge
names(lmridge)
lmridge(coeff)
lmridge$coeff
lmridge$coef
lmridge$lambda
summary(lars)
cv.lars<-lars(cbind(avgt$fork,avgt$smile,avgt$array,avgt$json,avgt$ext,avgt$fast,avgt$compress,avgt$iteration),avgt$metric, type=c("lar"))
cv.lars
summary(lm)
cv.lars
names(cv.lars)
plot(cv.lars)
plot(lars)
coef(lars)
coef(lars, s=4)
coef(lars, s=4, mode="lambda")
summary(lm)
coef(lars, s=7, mode="lambda")
coef(lars, s=10, mode="lambda")
coef(lars, s=1, mode="lambda")
lars$R2
names(lars)
lars$RSS
help(lars)
help(coef)
help(lars.coef)
help(coef.lars)
plot(lars)
coef(lars, s=0, mode="lambda")
summary(lm)
help(lars)
lars<-lars(cbind(avgt$fork,avgt$smile,avgt$array,avgt$json,avgt$ext,avgt$fast,avgt$compress,avgt$iteration),avgt$metric, type=c("lasso"))
coef(lars, s=0, mode="lambda")
plot(lars)
lars<-lars(cbind(avgt$fork,avgt$smile,avgt$array,avgt$json,avgt$ext,avgt$fast,avgt$compress,avgt$iteration),avgt$metric, type=c("forward.stagewise"))
plot(lars)
coef(lars, s=0, mode="lambda")
names(lars)
lars$Cp
plot(lars plottype="Cp")
plot(lars, plottype="Cp")
lars<-lars(cbind(avgt$fork,avgt$smile,avgt$array,avgt$json,avgt$ext,avgt$fast,avgt$compress,avgt$iteration),avgt$metric, type=c("lasso"))
plot(lars, plottype="Cp")
cv.lars<-lars(cbind(avgt$fork,avgt$smile,avgt$array,avgt$json,avgt$ext,avgt$fast,avgt$compress,avgt$iteration),avgt$metric, type=c("lasso"))
cv.lars$fraction[which.min(cv.lars$cv)]
cv.lars
plot(cv.lars)
plot(cv.lars, plottype="coefficients")
plot(cv.lars, plottype="Cp")
which.min[cv.lars$cv]
lmridge<-lm.ridge(metric~fork+smile+array+json+ext+fast+compress+iteration, data=avgt)
lm.ridge(metric~fork+smile+array+json+ext+fast+compress+iteration, data=avgt)
lm.ridge(metric~fork+smile+array+json+ext+fast+compress+iteration, data=avgt, lambda=2.7)
lm.ridge(metric~fork+smile+array+json+ext+fast+compress+iteration, data=avgt, lambda=c(0,10,1))
lmridge<-lm.ridge(metric~fork+smile+array+json+ext+fast+compress+iteration, data=avgt, lambda=c(0,10,1))
lmridge$kHKB
lmridge$kLW
lmridge$GCV
lm.ridge(metric~fork+smile+array+json+ext+fast+compress+iteration+smile:array+smile:json+array:json+fast:compress, data=avgt, lambda=c(0,10,1))
lmridge<-lm.ridge(metric~fork+smile+array+json+ext+fast+compress+iteration+smile:array+smile:json+array:json+fast:compress, data=avgt, lambda=c(0,10,1))
lmridge
lmridge$kHKB
lmridge$kLW
lmridge$GCV
summary(lmridge)
lmridge$coef
lmridge$xm
lmridge$ym
lmridge$coef
names(lmridge)
lmridge$coef
lmridge$kHKB
lmridge$kLW
lmridge$GCV
lmridge<-lm.ridge(metric~fork+smile+array+json+ext+fast+compress+iteration+smile:array+smile:json+array:json+fast:compress, data=avgt, lambda=seq(0,10,1))
lmridge$GCV
plot(lmridge$GCV)
lmridge<-lm.ridge(metric~fork+smile+array+json+ext+fast+compress+iteration+smile:array+smile:json+array:json+fast:compress, data=avgt, lambda=seq(0,2,0.1))
plot(lmridge$GCV)
lmridge<-lm.ridge(metric~fork+smile+array+json+ext+fast+compress+iteration+smile:array+smile:json+array:json+fast:compress, data=avgt, lambda=seq(0,2,0.1))
lmridge$GCV
plot(lmridge$GCV)
lmridge<-lm.ridge(metric~fork+smile+array+json+ext+fast+compress+iteration+smile:array+smile:json+array:json+fast:compress, data=avgt, lambda=seq(0.1,2,0.1))
plot(lmridge$GCV)
lmridge<-lm.ridge(metric~fork+smile+array+json+ext+fast+compress+iteration+smile:array+smile:json+array:json+fast:compress, data=avgt, lambda=seq(0.1,1,0.1))
plot(lmridge$GCV)
lmridge<-lm.ridge(metric~fork+smile+array+json+ext+fast+compress+iteration+smile:array+smile:json+array:json+fast:compress, data=avgt, lambda=seq(0.4,0.8,0.05))
plot(lmridge$GCV)
lmridge<-lm.ridge(metric~fork+smile+array+json+ext+fast+compress+iteration+smile:array+smile:json+array:json+fast:compress, data=avgt, lambda=seq(0.4,0.8,0.05))
plot(lmridge$GCV)
plot(lmridge$GCV, seq(0.4,0.8,0.05))
plot(lmridge$GCV~ seq(0.4,0.8,0.05))
lmridge<-lm.ridge(metric~fork+smile+array+json+ext+fast+compress+iteration+smile:array+smile:json+array:json+fast:compress, data=avgt, lambda=seq(0.62,0.68,0.01))
plot(lmridge$GCV~ seq(0.62,0.68,0.01))
plot(lmridge$GCV~ seq(0.655,0.665,0.001))
lmridge<-lm.ridge(metric~fork+smile+array+json+ext+fast+compress+iteration+smile:array+smile:json+array:json+fast:compress, data=avgt, lambda=seq(0.655,0.665,0.001))
names(lmridge)
lmridge$GCV
min(lmridge$GCV)
plot(lmridge$GCV~ seq(0.655,0.665,0.001))
lmridge$kHKB
lmridge$kLW
model<-metric~fork+smile+array+json+ext+fast+compress+iteration+smile:array+smile:json+array:json+fast:compress
avgt<-results[results$mode=="avgt" & results$threads==1,]
model<-metric~fork+smile+array+json+ext+fast+compress+iteration+smile:array+smile:json+array:json+fast:compress
lm<-lm(model, data=avgt)
library(MASS)
lmridge<-lm.ridge(model, data=avgt, lambda=seq(0.655,0.665,0.001))
lm
summary(lm)
lmridge
summary(lmridge)
lmridge$coef
avgt<-results[results$mode=="avgt" & results$threads==1,]
model<-metric~fork+smile+array+json+ext+compress+iteration+smile:array+smile:json+array:json+fast:compress
lm<-lm(model, data=avgt)
library(MASS)
lmridge<-lm.ridge(model, data=avgt, lambda=seq(0.655,0.665,0.001))
summary(lm)
lmridge
lmridge<-lm.ridge(model, data=avgt, lambda=seq(0,10,1))
names(lmridge)
lmridge$GCV
min(lmridge$GCV)
lmridge$GCV[lmridge$GCV==min(lmridge$GCV)]
which.min(lmridge$GCV)
plot(lmridge)
which.min(lmridge$GCV)
seq(0,10,1)[which.min(lmridge$GCV)]
seq(0,10,1)[c(1,2)]
c(lmridge$GCV)
t<-c(1,4,3,76,9)
t
names(lmridge$GCV)
typeof(t)
typeof(lmridge$GCV)
unname(lmridge$GCV)
which.min(unname(lmridge$GCV))
seq(0,10,1)[which.min(unname(lmridge$GCV))]
step<-1
lambda<-seq(0,10,step)
lmridge<-lm.ridge(model, data=avgt, lambda=seq(0,10,1))
minindex<-which.min(unname(lmridge$GCV))
lambda<-(minindex-step, minindex+step,step/5)
step<-step/5
library(MASS)
step<-1
lambda<-seq(0,10,step)
lmridge<-lm.ridge(model, data=avgt, lambda=seq(0,10,1))
minindex<-which.min(unname(lmridge$GCV))
lambda<-seq(minindex-step, minindex+step,step/5)
step<-step/5
minindex
minindex<-which.min(unname(lmridge$GCV))
lambda
lambda[minindex]
step<-1
lambda<-seq(0,10,step)
lmridge<-lm.ridge(model, data=avgt, lambda=seq(0,10,1))
minindex<-which.min(unname(lmridge$GCV))
lambda
step<-1
lambda<-seq(0,10,step)
lmridge<-lm.ridge(model, data=avgt, lambda=seq(0,10,1))
minindex<-which.min(unname(lmridge$GCV))
value<-lambda[minindex]
value
step<-1
lambda<-seq(0,10,step)
lmridge<-lm.ridge(model, data=avgt, lambda=seq(0,10,1))
valuemin<-lambda[which.min(unname(lmridge$GCV))]
lambda<-seq(valuemin-step, valuemin+step,step/5)
lambda
valuemin
step<-1
for (i in 1:10) }
lambda<-seq(0,10,step)
lmridge<-lm.ridge(model, data=avgt, lambda=seq(0,10,1))
valuemin<-lambda[which.min(unname(lmridge$GCV))]
lambda<-seq(valuemin-step, valuemin+step,step/5)
step<-step/5
}
step<-1
for (i in 1:10) {
lambda<-seq(0,10,step)
lmridge<-lm.ridge(model, data=avgt, lambda=seq(0,10,1))
valuemin<-lambda[which.min(unname(lmridge$GCV))]
lambda<-seq(valuemin-step, valuemin+step,step/5)
step<-step/5
}
lambda
plot(lmridge)
summary(lmridge)
lmridge$coef
names(lmridge)
lmridge$GCV
step<-1
lambda<-seq(0,10,step)
for (i in 1:10) {
lmridge<-lm.ridge(model, data=avgt, lambda=seq(0,10,1))
valuemin<-lambda[which.min(unname(lmridge$GCV))]
lambda<-seq(valuemin-step, valuemin+step,step/5)
step<-step/5
}
valuemin
plot(lmridge$lambda)
plot(lmridge$lambda, lambda)
step<-1
lambda<-seq(0,10,step)
for (i in 1:10) {
lmridge<-lm.ridge(model, data=avgt, lambda=lambda)
valuemin<-lambda[which.min(unname(lmridge$GCV))]
lambda<-seq(valuemin-step, valuemin+step,step/5)
step<-step/5
}
plot(lmridge$lambda, lambda)
lmridge$lambda
lambda
plot(lmridge$lambda)
step<-1
lambda<-seq(0,10,step)
for (i in 1:2) {
lmridge<-lm.ridge(model, data=avgt, lambda=lambda)
valuemin<-lambda[which.min(unname(lmridge$GCV))]
lambda<-seq(valuemin-step, valuemin+step,step/5)
step<-step/5
}
lambda
lmridge
names(lmridge)
lmridge$GCV
plot(lmridge$GCV)
step<-1
lambda<-seq(0,10,step)
for (i in 1:3) {
lmridge<-lm.ridge(model, data=avgt, lambda=lambda)
valuemin<-lambda[which.min(unname(lmridge$GCV))]
lambda<-seq(valuemin-step, valuemin+step,step/5)
step<-step/5
}
lmridge<-lm.ridge(model, data=avgt, lambda=valuemin)
names(lmridge)
plot(lmridge$GCV)
lmridge$lambda
step<-1
lambda<-seq(0,10,step)
for (i in 1:10) {
lmridge<-lm.ridge(model, data=avgt, lambda=lambda)
valuemin<-lambda[which.min(unname(lmridge$GCV))]
lambda<-seq(valuemin-step, valuemin+step,step/5)
step<-step/5
}
lmridge<-lm.ridge(model, data=avgt, lambda=valuemin)
lmridge$lambda
lmridge$coef
model<-metric~fork+smile+array+json+ext+compress+iteration+smile:array+smile:json+array:json+fast:compress
lm<-lm(model, data=avgt)
summary(lm)
stepAIC(lmridge)
stepAIC(lm)
avgt<-results[results$mode=="avgt" & results$threads==1,]
model<-metric~fork+smile+array+json+ext+fast+iteration+smile:array+smile:json+array:json+fast:compress
lm<-lm(model, data=avgt)
library(MASS)
step<-1
lambda<-seq(0,10,step)
for (i in 1:10) {
lmridge<-lm.ridge(model, data=avgt, lambda=lambda)
valuemin<-lambda[which.min(unname(lmridge$GCV))]
lambda<-seq(valuemin-step, valuemin+step,step/5)
step<-step/5
}
lmridge<-lm.ridge(model, data=avgt, lambda=valuemin)
stepAIC(lm)
lm
avgt<-results[results$mode=="avgt" & results$threads==1,]
model<-metric~fork+smile+array+json+ext+fast+compress+iteration+smile:array+smile:json+array:json
lm<-lm(model, data=avgt)
library(MASS)
step<-1
lambda<-seq(0,10,step)
for (i in 1:10) {
lmridge<-lm.ridge(model, data=avgt, lambda=lambda)
valuemin<-lambda[which.min(unname(lmridge$GCV))]
lambda<-seq(valuemin-step, valuemin+step,step/5)
step<-step/5
}
lmridge<-lm.ridge(model, data=avgt, lambda=valuemin)
lm
avgt<-results[results$mode=="avgt" & results$threads==1,]
model<-metric~fork+smile+array+json+ext+fast+compress+iteration+smile:array
lm<-lm(model, data=avgt)
library(MASS)
step<-1
lambda<-seq(0,10,step)
for (i in 1:10) {
lmridge<-lm.ridge(model, data=avgt, lambda=lambda)
valuemin<-lambda[which.min(unname(lmridge$GCV))]
lambda<-seq(valuemin-step, valuemin+step,step/5)
step<-step/5
}
lmridge<-lm.ridge(model, data=avgt, lambda=valuemin)
avgt<-results[results$mode=="avgt" & results$threads==1,]
model<-metric~entity+fork+smile+array+json+ext+fast+compress+iteration+smile:array
lm<-lm(model, data=avgt)
library(MASS)
step<-1
lambda<-seq(0,10,step)
for (i in 1:10) {
lmridge<-lm.ridge(model, data=avgt, lambda=lambda)
valuemin<-lambda[which.min(unname(lmridge$GCV))]
lambda<-seq(valuemin-step, valuemin+step,step/5)
step<-step/5
}
lmridge<-lm.ridge(model, data=avgt, lambda=valuemin)
lm
summary(lm)
levels(results$entity)
stepAIV(lm)
stepAIC(lm)
lmridge
stepAIC(lm)$anova
help(stepAIC)
stepAIC(lm, direction=c("both"))
stepAIC(lmridge, direction=c("both"))
library(glmulti)
install.packages("glmulti")
library(glmulti)
install.packages("rJava")
install.packages("rJava")
install.packages("glmulti")
library(glmulti)
install.packages("leaps")
library(leaps)
leaps<-leaps(cbind(avgt$entity,avgt$fork,avgt$smile,avgt$array,avgt$json,avgt$ext,avgt$fast,avgt$compress,avgt$iteration),avgt$metric, method=c("Cp", "r2"))
leaps
summary(leaps)
coefficients(leaps)
coef(leaps)
regsubsets(model)
regsubsets(model, data=avgt)
summary(regsubsets(model, data=avgt))
install.packages("meifly")
library(meifly)
library(leaps)
leaps<-leaps(x=avgt[,c("entity","fork","smile","array","json","ext","fast","compress","iteration"),y=avgt$metric, method="coxph")
library(leaps)
fitall(x=avgt[,c("entity","fork","smile","array","json","ext","fast","compress","iteration"),y=avgt$metric, method="coxph")
library(leaps)
fitall(x=avgt[,c("entity","fork","smile","array","json","ext","fast","compress","iteration")],y=avgt$metric, method="coxph")
library(leaps)
fitall(x=avgt[,c("entity","fork","smile","array","json","ext","fast","compress","iteration")],y=avgt$metric, method="lm")
library(leaps)
fitall<-fitall(x=avgt[,c("entity","fork","smile","array","json","ext","fast","compress","iteration")],y=avgt$metric, method="lm")
summary(fitall)
t(sapply(fitall,actractAIC))
order(fitall[,2])
library(lars)
lars<-lars(cbind(avgt$entity,avgt$fork,avgt$smile,avgt$array,avgt$json,avgt$ext,avgt$fast,avgt$compress,avgt$iteration),avgt$metric, type=c("lar"))
lars
summary(lars)
coef(lars)
coef(lars)[8,]
names(lars)
lars$Cp
which.min(lars$Cp)
which.min(unname(lars$Cp))
lars$Cp[which.min(unname(lars$Cp))]
coef(lars)[8,]
library(lars)
lars<-lars(cbind(avgt$entity,avgt$fork,avgt$smile,avgt$array,avgt$json,avgt$ext,avgt$fast,avgt$compress,avgt$iteration),avgt$metric, type=c("lar"))
bestfit<-lars$Cp[which.min(unname(lars$Cp))]
coef(lars)[bestfit,]
lars<-lars(cbind(avgt$entity,avgt$fork,avgt$smile,avgt$array,avgt$json,avgt$ext,avgt$fast,avgt$compress,avgt$iteration),avgt$metric, type=c("lar"))
bestfit<-lars$Cp[which.min(unname(lars$Cp))]
lmlars<-coef(lars)[bestfit,]
names(lmlars)<-c("entity","fork","smile","array","json","ext","fast","compress","iteration")
lmlars
summary(lm)
lars<-lars(cbind(avgt$entity,avgt$fork,avgt$smile,avgt$array,avgt$json,avgt$ext,avgt$fast,avgt$compress,avgt$iteration),avgt$metric, type=c("lar"), intercept=T)
bestfit<-lars$Cp[which.min(unname(lars$Cp))]
lmlars<-coef(lars)[bestfit,]
names(lmlars)<-c("entity","fork","smile","array","json","ext","fast","compress","iteration")
lmlars
names(lmlars)
names(lars)
lars(df)
lars$df
coef(lars)
lars$meanx
lars$normx
summary(lm)
lars$meanx
lmlars
stepAIC(lm, direction="both")
lmbest<-stepAIC(lm, direction=c("both"))
lmbest
lmlars
predict(lmlars,cbind(avgt$entity,avgt$fork,avgt$smile,avgt$array,avgt$json,avgt$ext,avgt$fast,avgt$compress,avgt$iteration),avgt$metric,s=2)$fit
predict(lmlars,data.frame(0,0,0,0,0,0,0,0,0),avgt$metric,s=2)$fit
predict(lmlars,data.frame(0,0,0,0,0,0,0,0,0),avgt$metric,s=1)$fit
predict(lmlars,cbind(avgt$entity,avgt$fork,avgt$smile,avgt$array,avgt$json,avgt$ext,avgt$fast,avgt$compress,avgt$iteration),avgt$metric,s=2)$fit
help(predict)
lmlars
predict(lars,cbind(avgt$entity,avgt$fork,avgt$smile,avgt$array,avgt$json,avgt$ext,avgt$fast,avgt$compress,avgt$iteration),avgt$metric,s=2)$fit
predict(lars)
predict(lars,s=2)$fit
predict(lars,data.frame(0,0,0,0,0,0,0,0,0),avgt$metric,s=2)$fit
predict(lars,data.frame(0,0,0,0,0,0,0,0,0),avgt$metric,s=2, type="fit")$fit
predict(lars,data.frame(0,0,0,0,0,0,0,0,0),avgt$metric,s=2, type="coef")
predict(lars,avgt$metric,s=2, type="coef")
predict(lars,avgt$metric,s=0, type="coef")
predict(lars,avgt$metric,s=1, type="coef")
predict(lars,avgt$metric,s=10, type="coef")
predict(lars,avgt$metric,s=8, type="coef")
predict(lars,c(0,0,0,0,0,0,0,0,0),avgt$metric,s=8)$fit
predict(lars,c("0","0","0","0","0","0","0","0","0"),avgt$metric,s=8)$fit
names(lars)
lars
help(predict.lars)
predict(lars,c("0","0","0","0","0","0","0","0","0"),s=8)$fit
data(diabetes)
attach(diabetes)
object<-lars(x,y,type="lasso")
object
predict.lars(object,x,type="fit")
x
object
summary(object)
predict(object,s=4.1,type="coef",mode="norm")
lmlars
lars<-lars(c(avgt$entity,avgt$fork,avgt$smile,avgt$array,avgt$json,avgt$ext,avgt$fast,avgt$compress,avgt$iteration),s=8,type="fit")
lars<-lars(c(avgt$entity,avgt$fork,avgt$smile,avgt$array,avgt$json,avgt$ext,avgt$fast,avgt$compress,avgt$iteration),type="fit")
predict.lars(lars,c(avgt$entity,avgt$fork,avgt$smile,avgt$array,avgt$json,avgt$ext,avgt$fast,avgt$compress,avgt$iteration),type="fit")
summary(lars)
lmlars
summary(lm)
summary(lmbest)
lmlars
lmridge
